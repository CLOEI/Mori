/*
 * Auto-generated by Frida. Please modify to match the signature of sub_b67f20.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

defineHandler({
  onEnter(log, args, state) {
    const packet_type = args[0]
    const tank_type = args[1].readU8()
    const tank_data = args[2]

    if (tank_type == 21) {
      log(packet_type, tank_type, tank_data)
      const parsed = parseTankPacket(args[1])
      log(JSON.stringify(parsed, null, 2));
    }
  },

  onLeave(log, retval, state) {
  }
});

function parseTankPacket(ptr) {
  if (ptr.isNull()) {
    return null;
  }

  try {
    const packet = {
      type:                 ptr.readU8(),                          // Offset 0
      object_type:          ptr.add(1).readU8(),                   // Offset 1
      jump_count:           ptr.add(2).readU8(),                   // Offset 2
      animation_type:       ptr.add(3).readU8(),                   // Offset 3
      net_id:               ptr.add(4).readS32(),                  // Offset 4
      target_net_id:        ptr.add(8).readS32(),                  // Offset 8
      flags:                ptr.add(12).readU32(),                 // Offset 12
      float_var:            ptr.add(16).readFloat(),               // Offset 16
      value:                ptr.add(20).readU32(),                 // Offset 20
      vector_x:             ptr.add(24).readFloat(),               // Offset 24
      vector_y:             ptr.add(28).readFloat(),               // Offset 28
      vector_x2:            ptr.add(32).readFloat(),               // Offset 32
      vector_y2:            ptr.add(36).readFloat(),               // Offset 36
      particle_rotation:    ptr.add(40).readFloat(),               // Offset 40
      int_x:                ptr.add(44).readS32(),                 // Offset 44
      int_y:                ptr.add(48).readS32(),                 // Offset 48
      extended_data_length: ptr.add(52).readU32()                  // Offset 52
    };
    return packet;
  } catch (e) {
    console.error(`Error parsing TankPacket at ${ptr}: ${e.message}`);
    return null;
  }
}